name: "woa"
permissions: {}

on:
  workflow_dispatch: ~

jobs:

  windows:
    name: WoA Qt Install
    permissions:
      id-token: write
      contents: write
      attestations: write
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - QT_VERSION: '6.8.3'
            ARCH: 'arm64'
            HOST_ARCH: 'arm64'
            COMPILER: 'msvc2022_arm64'
            METHOD: 'aqt'
            RELEASE: false
            GENERATOR: 'Ninja'
            os: windows-2025

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Qt setup(aqt)
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install Qt
      id: installqt
      env:
        CI_BUILD_DIR: ${{ github.workspace }}
      shell: bash
      run: |
        if [ -n "${{ matrix.CROSS_COMPILER }}" ]; then
          ./tools/ci_install_windows.sh "${{ matrix.QT_VERSION }}" "${{ matrix.COMPILER }}" "${{ matrix.METHOD }}" "${{ matrix.CROSS_COMPILER }}"
        else
          ./tools/ci_install_windows.sh "${{ matrix.QT_VERSION }}" "${{ matrix.COMPILER }}" "${{ matrix.METHOD }}"
        fi
        echo "qtdir=$(cygpath -w "${HOME}/Cache/Qt/${{ matrix.QT_VERSION }}/${{ matrix.COMPILER }}/")" >> "$GITHUB_OUTPUT"

    - uses: jfrog/setup-jfrog-cli@v4
      env:
        JF_URL: 'https://gpsbabel.jfrog.io'
        JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
        JFROG_CLI_LOG_LEVEL: DEBUG
    - shell: pwsh
      run: |
        Set-Location "$Home/Cache/Qt"
        jf rt u "${{ matrix.QT_VERSION }}/${{ matrix.COMPILER }}/" qt-images-local/windows_arm64-${{ matrix.QT_VERSION }}-${{ matrix.COMPILER }}.zip --archive zip

  woa:
    name: WoA native build
    needs: windows
    permissions:
      id-token: write
      contents: write
      attestations: write
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - QT_VERSION: '6.8.3'
            ARCH: 'arm64'
            HOST_ARCH: 'arm64'
            COMPILER: 'msvc2022_arm64'
            METHOD: 'aqt'
            RELEASE: false
            GENERATOR: 'Ninja'
            os: windows-11-arm

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Qt
      id: installqt
      env:
        CI_BUILD_DIR: ${{ github.workspace }}
      shell: bash
      run: |
        echo "qtdir=$(cygpath -w "${HOME}/Cache/Qt/${{ matrix.QT_VERSION }}/${{ matrix.COMPILER }}/")" >> "$GITHUB_OUTPUT"

    - uses: jfrog/setup-jfrog-cli@v4
      env:
        JF_URL: 'https://gpsbabel.jfrog.io'
        JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
        JFROG_CLI_LOG_LEVEL: DEBUG
    - shell: pwsh
      run: |
        New-Item "$Home/Cache/Qt" -type directory -Force | Out-Null
        Set-Location "$Home/Cache/Qt"
        jf rt dl qt-images-local/windows_arm64-${{ matrix.QT_VERSION }}-${{ matrix.COMPILER }}.zip --explode
    - shell: bash
      run : |
        ls
        ls "${HOME}"
        ls "${HOME}/Cache/Qt/${{ matrix.QT_VERSION }}/${{ matrix.COMPILER }}/"

    - name: Install Inno Setup
      run: choco install innosetup 

    - name: Build
      shell: pwsh
      run: |
        .\tools\ci_setup_windows.ps1 -qtdir "$Home\Cache\Qt\${{ matrix.QT_VERSION }}\${{ matrix.COMPILER }}" -arch "${{ matrix.ARCH }}" -host_arch "${{ matrix.HOST_ARCH }}" -vcversion "${{ matrix.VCVERSION }}"
        .\tools\ci_script_windows.ps1 -generator "${{ matrix.GENERATOR }}" -arch "${{ matrix.ARCH }}" -toolset "${{ matrix.TOOLSET }}"

    - name: Rename
      shell: bash
      run: |
        VERSION_ID=$(date -u +%Y%m%dT%H%MZ --date=$(git show -s --format=%aI HEAD))-$(git rev-parse --short=7 HEAD)
        SETUP=$(ls bld/gui/GPSBabel-*-Setup-*.exe | sed "s/\([^-]*\)-\([^-]*\)-\(.*\)/\1-${VERSION_ID}-\3/")
        mv bld/gui/GPSBabel-*-Setup-*.exe ${SETUP}
        MANIFEST=$(ls bld/gui/GPSBabel-*-Manifest-*.txt | sed "s/\([^-]*\)-\([^-]*\)-\(.*\)/\1-${VERSION_ID}-\3/")
        mv bld/gui/GPSBabel-*-Manifest-*.txt ${MANIFEST}

    - name: Test
      shell: bash
      run: |
        PNAME=./bld/gui/package/gpsbabel.exe GBTEMP=./gbtemp ./testo 2>&1
        PNAME=./bld/gui/package/gpsbabel.exe GBTEMP=./gbtemp ./test_encoding_utf8 2>&1

